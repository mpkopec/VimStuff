global !p
def const_width(text, word_width):
	tlen = len(text)
	if tlen <= word_width:
		return " "*(word_width-tlen)
	else:
		return ""

def const_width_global(text):
	tlen = len(text)
	word_width = int(snip.opt("g:constant_width_snippet_value", "20"))
	if tlen <= word_width:
		return " "*(word_width-tlen)
	else:
		return ""
endglobal

# ============================
# I/O, signals, variables and
# other one-liners.
# ============================
snippet io "I/O declaration" b
$1`!p snip.rv = const_width_global(t[1])` : $2`!p snip.rv = const_width(t[2], 6)` ${3:type};
endsnippet

snippet ion "I/O declaration, no semicolon" b
$1`!p snip.rv = const_width_global(t[1])` : $2`!p snip.rv = const_width(t[2], 6)` ${3:type}
endsnippet

snippet iov "I/O declaration for vector" b
$1`!p snip.rv = const_width_global(t[1])` : $2`!p snip.rv = const_width(t[2], 6)` ${3:type}_vector (${4:n} downto 0);
endsnippet

snippet iovn "I/O declaration for vector, no semicolon" b
$1`!p snip.rv = const_width_global(t[1])` : $2`!p snip.rv = const_width(t[2], 6)` ${3:type}_vector (${4:n} downto 0)
endsnippet

snippet sig "signal declaration" b
signal $1`!p snip.rv = const_width_global(t[1])` : ${2:type};
endsnippet

snippet sigv "signal declaration for vector" b
signal $1`!p snip.rv = const_width_global(t[1])` : ${2:type}_vector (${3:n} downto 0);
endsnippet

snippet siglo "std_logic declaration" b
signal $1`!p snip.rv = const_width_global(t[1])` : std_logic;
endsnippet

snippet siglov "std_logic vector declaration" b
signal $1`!p snip.rv = const_width_global(t[1])` : std_logic_vector (${2:n} downto 0);
endsnippet

snippet sigval "signal declaration with value" b
signal $1`!p snip.rv = const_width_global(t[1])` : $2`!p snip.rv = const_width(t[2], 6)` := ${3:value};
endsnippet

snippet sigvval "signal declaration for vector with value" b
signal $1`!p snip.rv = const_width_global(t[1])` : ${2:type}_vector (${3:n} downto 0) := ${4:value};
endsnippet

snippet gen "generic declaration" b
$1`!p snip.rv = const_width_global(t[1])` : $2`!p snip.rv = const_width(t[2], 6)` := '${3:value}';
endsnippet

snippet mp "map port" b
$1`!p snip.rv = const_width_global(t[1])` => ${2:outside_signal},
endsnippet

snippet mpo "map port to open" b
$1`!p snip.rv = const_width_global(t[1])` => open,
endsnippet

snippet mpon "map port to open, no semicolon" b
$1`!p snip.rv = const_width_global(t[1])` => open
endsnippet

snippet mps "map port, same signal name" b
$1`!p snip.rv = const_width_global(t[1])` => ${1/(\w+).*/$1/g},
endsnippet

snippet mpsn "map port, same signal name, no semicolon" b
$1`!p snip.rv = const_width_global(t[1])` => ${1/(\w+).*/$1/g}
endsnippet

snippet mpn "map port, no semicolon" b
$1`!p snip.rv = const_width_global(t[1])` => ${2:outside_signal}
endsnippet

snippet w "wait;"
wait;
endsnippet

snippet wf "wait for n_time"
wait for ${1:n_time};
endsnippet

# ============================
# Entities, architectures,
# components, instantiation,
# processes
# ============================
snippet ent "entity statement" b
entity ${1:name} is
	port (
		${2:port declaration}
	);
end $1;
endsnippet

snippet entg "entity statement with generic part" b
entity ${1:name} is
	generic (
		${2:generic declaration}
	);
	port (
		${3:port declaration}
	);
end $1;
endsnippet

snippet arch "architecture declaration" b
architecture ${1:name} of ${2:component} is
	-- Architecture's declarative part
	${3:declarations}
begin
	-- Architecture body
	${4:body}
end $1;
endsnippet

snippet comp "component declaration" b
component ${1:name} 
	port (
		${2:port declaration}
	);
end component;
endsnippet

snippet compg "component declaration with generic part" b
component ${1:name} 
	generic (
		${2:generic declaration}
	)
	port (
		${3:port declaration}
	);
end component;
endsnippet

snippet inst "instantiation" b
${1:inst_name}: ${2:entity_name}
port map (
	${3:port_map}
);
endsnippet

snippet instg "instantiation with generics" b
${1:inst_name}: ${2:entity_name}
generic map (
	${3:generic_map}
)
port map (
	${4:port_map}
);
endsnippet

snippet proc "process statement" b
${1:name}: process (${2:signals})
begin
	${3:body}
end process;
endsnippet

snippet procn "process statement, no sensitivity list" b
${1:name}: process
begin
	${2:process_body}
end process;
endsnippet

# ============================
# Flow control structures
# ============================

# If statement
snippet if "if statement" b
if ${1:condition} then
	${2:if_body}
end if;
endsnippet

snippet ife "if-else statement" b
if ${1:condition} then
	${2:if_body}
else
	${3:else_body}
end if;
endsnippet

snippet ifeif "if-elsif statement" b
if ${1:condition} then
	${2:if_body}
elsif ${3:condition} then
	${4:elsif_body}
end if;
endsnippet

snippet ifeife "if-elsif-else statement" b
if ${1:condition} then
	${2:if_body}
elsif ${3:condition} then
	${4:elsif_body}
else
	${5:else_body}
end if;
endsnippet

# Case statement
snippet case "basic case statement" b
case ${1:what} is
	${2:case_body}
end case;
endsnippet

# ============================
# Useful combinations of other
# ============================

snippet seq "sequential block, active-high reset" b
${1:name}: process (${2:rst}, ${3:clk})
begin
	if $2 = '1' then
		${4:reset_action}
	elsif rising_edge($3) then
		${5:rising_edge_action}
	end if;
end process;
endsnippet
